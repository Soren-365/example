alter table "conferati"."organization_role" drop constraint "organization_role_organization_fkey";

alter table "conferati"."organization_role" drop constraint "organization_role_person_fkey";

create table "conferati"."app_whitefilter_structuretable" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "filter" text not null,
    "table_address" text not null,
    "app_id" bigint not null,
    "column_address" text not null
);


create table "conferati"."filtertypes_structuretable" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "type" text not null
);


CREATE UNIQUE INDEX app_whitefilter_types_pkey ON conferati.app_whitefilter_structuretable USING btree (id);

CREATE UNIQUE INDEX type_stucturetable_pkey ON conferati.filtertypes_structuretable USING btree (id);

CREATE UNIQUE INDEX type_stucturetable_type_key ON conferati.filtertypes_structuretable USING btree (type);

alter table "conferati"."app_whitefilter_structuretable" add constraint "app_whitefilter_types_pkey" PRIMARY KEY using index "app_whitefilter_types_pkey";

alter table "conferati"."filtertypes_structuretable" add constraint "type_stucturetable_pkey" PRIMARY KEY using index "type_stucturetable_pkey";

alter table "conferati"."app_whitefilter_structuretable" add constraint "app_whitefilter_structuretable_app_id_fkey" FOREIGN KEY (app_id) REFERENCES app(id) not valid;

alter table "conferati"."app_whitefilter_structuretable" validate constraint "app_whitefilter_structuretable_app_id_fkey";

alter table "conferati"."app_whitefilter_structuretable" add constraint "app_whitefilter_structuretable_filter_fkey" FOREIGN KEY (filter) REFERENCES conferati.filtertypes_structuretable(type) not valid;

alter table "conferati"."app_whitefilter_structuretable" validate constraint "app_whitefilter_structuretable_filter_fkey";

alter table "conferati"."filtertypes_structuretable" add constraint "type_stucturetable_type_key" UNIQUE using index "type_stucturetable_type_key";

alter table "conferati"."organization" add constraint "organization_type_fkey" FOREIGN KEY (type) REFERENCES conferati.filtertypes_structuretable(type) not valid;

alter table "conferati"."organization" validate constraint "organization_type_fkey";

alter table "conferati"."organization_role" add constraint "organizaion_role_organization_fkey" FOREIGN KEY (organization) REFERENCES conferati.organization(id) not valid;

alter table "conferati"."organization_role" validate constraint "organizaion_role_organization_fkey";

alter table "conferati"."organization_role" add constraint "organizaion_role_person_fkey" FOREIGN KEY (person) REFERENCES conferati.person(id) not valid;

alter table "conferati"."organization_role" validate constraint "organizaion_role_person_fkey";


alter table "public"."module_section_data" alter column "name" drop not null;

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.get_module_section_data_with_app_filter(url_module text, url_app text)
 RETURNS TABLE(data jsonb)
 LANGUAGE plpgsql
AS $function$
DECLARE 
join_fk text := 'j.' || $2;
data_tables record;
data jsonb := '[]';

this_module_section int;
this_statement text;
temp_jsonb jsonb;
temp_jsonb_data jsonb;
temp_statement text;
this_data record;
BEGIN


 FOR this_data in SELECT * FROM (
 WITH 
page_module AS (SELECT id FROM page_module WHERE url_name = $1 AND app = $2),
sql_table AS (SELECT a.id, b.get_section_data_sql FROM module_section a JOIN module_section_data b ON a.module_section_data = b.id WHERE page_module = (SELECT id FROM page_module))
 SELECT * FROM sql_table 
) z LOOP
-- RAISE EXCEPTION 'module_s_d id % - id %',this_data.id, this_data.get_section_data_sql;

 EXECUTE this_data.get_section_data_sql USING url_app INTO temp_jsonb;
--  RAISE EXCEPTION '%', temp_jsonb;
temp_jsonb_data := json_build_object ('sectionId', this_data.id, 'section_data', temp_jsonb::jsonb)::jsonb;	
 if EXISTS (SELECT data->0) THEN
data :=  jsonb_concat(data, temp_jsonb_data );
ELSE
-- data := temp_jsonb_data;
data :=  temp_jsonb_data;
END IF;
END LOOP;

RETURN QUERY SELECT data;
END;
$function$
;


